from mayavi import mlab
from tvtk.tools import visual
import numpy as np

__author__ = 'Hector Azpurua'

class PathSimulator(object):

    color_codes = [
        (1, 0, 0),
        (0, 0, 1),
        (0, 1, 0),
        (1, 1, 0),
        (0, 1, 1),
        (1, 0, 1)
    ]

    ball_radius = 5
    curve_radius = 4

    def __init__(self, wp_list, hex_list, robot_height=40, np_file='/tmp/magnetic_ground_truth.np', width=800, height=600, start_point=(0, 0, 0)):
        self.debug = True
        self.movement_mode = 0
        self.start_point = start_point
        self.robot_height = robot_height

        self.width = width
        self.height = height

        self.wp_list = wp_list
        self.index_list = []
        self.history = []
        self.last_positions = []

        self.f = mlab.figure(size=(self.width, self.height))
        visual.set_viewer(self.f)

        self.balls = []
        self.trajectories = []

        colors = list(PathSimulator.color_codes)

        for i in xrange(len(self.wp_list)):
            color = colors.pop(0)
            ball = visual.sphere(color=color, radius=PathSimulator.ball_radius)
            ball.x = self.start_point[0]
            ball.y = self.start_point[1]
            ball.z = self.start_point[2]

            self.balls.append(ball)
            self.trajectories.append(visual.curve(color=color, radius=PathSimulator.curve_radius))
            self.index_list.append(0)
            self.history.append([])
            self.last_positions.append(self.start_point)

        x = np.linspace(0, self.width, 1)
        y = np.linspace(0, self.height, 1)

        self.z = np.loadtxt(np_file)
        self.z *= 255.0/self.z.max()
        mlab.surf(x, y, self.z)
    pass

    def anim(self):
        end_counter = 0

        for i in xrange(len(self.balls)):
            wp_index = self.index_list[i]
            ball = self.balls[i]

            curr_wp = list(self.wp_list[i][wp_index])
            ball_pos = ball.pos.tolist()
            last_pos = self.last_positions[i]

            if self.debug:
                print "Ball:", i
                print "Current waypoint index:", wp_index, curr_wp
                print "Ball position:", ball_pos

            px, py, pz = curr_wp
            bx, by, bz = ball_pos

            if last_pos != ball_pos:
                arr = visual.vector(float(bx), float(by), float(bz))
                self.history[i].append(arr)

                if len(self.history[i]) > 10:
                    self.trajectories[i].extend(self.history[i])
                    self.history[i][:] = []

            self.last_positions[i] = ball_pos

            dx = px - bx
            dy = py - by
            dz = pz - bz

            if self.debug:
                print "dx:", '{0:.3g}'.format(dx), "dy:", '{0:.3g}'.format(dy), "dz:", '{0:.3g}'.format(dz)

            if abs(dx) > 0.2 or abs(dy) > 0.2 or abs(dz) > 0.2:
                if self.movement_mode == 0:
                    err = 0.1

                    ball.x += dx * err
                    ball.y += dy * err
                    ball.z += dz * err

                else:
                    err = 0.06
                    lim = 1.5

                    ddx = dx * err
                    ddy = dy * err
                    ddz = dz * err

                    if abs(ddx) > lim:
                        if cmp(ddx, 0) < 0:
                            ball.x += (lim * -1)
                        else:
                            ball.x += lim
                    else:
                        ball.x += ddx

                    if abs(ddy) > lim:
                        if cmp(ddy, 0) < 0:
                            ball.y += (lim * -1)
                        else:
                            ball.y += lim
                    else:
                        ball.y += ddy

                    if abs(ddz) > lim:
                        if cmp(ddz, 0) < 0:
                            ball.z += (lim * -1)
                        else:
                            ball.z += lim
                    else:
                        ball.z += ddz

            else:
                if self.debug:
                    print "Increment index (", wp_index, 'of',  len(self.wp_list[i]), ')'
                if wp_index + 1 < len(self.wp_list[i]):
                    self.index_list[i] += 1
                else:
                    print 'Ball ', i, 'ended...'
                    end_counter += 1
            pass

            print "\n"

        if end_counter >= len(self.balls):
            print "Exiting path simulation..."
            mlab.close(all=True)

    def start_animation(self):
        a = visual.iterate(20, self.anim)
        visual.show()
        return a

if __name__ == '__main__':

    print "Testing path simulator"

    point_list = [
        [(207, 661, 243.74189850790609), (206, 660, 244.37650695445606), (206, 621, 269.79104621568342), (241, 680, 212.97458911760435), (258, 670, 196.46814426859123), (224, 611, 259.56320266995738), (241, 601, 231.12135189191969), (275, 659, 180.59562975125388), (275, 620, 182.82605284959456), (277, 620, 181.35267146378348), (276, 620, 182.06387614215586), (242, 600, 229.07533729707609), (311, 600, 178.09971030900354), (311, 580, 154.69428719821619), (242, 580, 229.04825400146433), (242, 560, 213.70567161495785), (309, 560, 125.12276545498888), (276, 540, 109.40112091197319), (276, 540, 109.40112091197319), (275, 539, 109.71721841313907), (275, 500, 71.569319987823874), (310, 559, 123.74498779078016), (327, 549, 112.40018515753904), (293, 490, 55.4285465993404), (310, 480, 44.979506076052061), (344, 538, 91.204300048884505), (344, 499, 51.777350411087973), (380, 480, 40.0), (381, 480, 40.0), (415, 500, 50.624523061950605), (346, 500, 52.591516904008969), (346, 520, 68.533275042898197), (415, 520, 64.075926755872587), (415, 540, 86.88837497224452), (348, 540, 96.717310677572129), (381, 560, 146.89820370012131), (379, 559, 145.03212616463134), (380, 560, 147.16168103775857), (380, 599, 229.2361014566174), (345, 540, 94.972584234439168), (328, 550, 114.49854241898319), (362, 609, 248.26571532143865), (345, 619, 235.27810038990322), (311, 561, 126.85504836969997), (311, 600, 178.09971030900354), (310, 600, 177.16230629028334), (311, 600, 178.09971030900354), (345, 620, 235.47201825493124), (276, 620, 182.06387614215586), (276, 640, 181.55429861983967), (345, 640, 226.3455502536296), (345, 660, 197.94793627586967), (278, 660, 178.48459719170293), (311, 680, 159.99390034021712), (344, 451, 40.0)],
        #[(345, 621, 235.60124608525305), (346, 620, 236.9160077017894), (380, 601, 231.83383921819222), (345, 660, 197.94793627586967), (363, 670, 183.76475625422472), (397, 611, 222.85998832185777), (415, 621, 188.13873751973293), (381, 679, 139.91046825167007), (415, 660, 146.25240069142382), (414, 661, 146.17195012310361), (415, 661, 144.55586875748747), (449, 681, 73.162677617829914), (380, 681, 135.56189870641674), (380, 701, 94.972584234439168), (449, 701, 59.07703921189767), (449, 721, 49.431504012816902), (382, 721, 67.034194611940251), (415, 741, 48.456899012846598), (381, 800, 40), (380, 800, 40), (346, 780, 72.693117707479558), (415, 780, 40.0), (415, 760, 40.0), (346, 760, 77.440372830010674), (346, 740, 91.112031044765587), (413, 740, 49.130993670192794), (380, 720, 68.253690381006137), (380, 720, 68.253690381006137), (379, 721, 67.234585300262339), (345, 740, 91.847818328280368), (380, 681, 135.56189870641674), (362, 671, 181.63499034772011), (328, 730, 111.60847084750844), (310, 720, 133.75075112584022), (344, 662, 193.85840035347834), (310, 681, 159.36185187864396), (310, 680, 160.12911499285292), (311, 681, 159.19843381535259), (311, 720, 132.79482117025839), (276, 661, 179.72978316545073), (259, 671, 195.42487146786075), (293, 730, 148.34632447610824), (276, 740, 166.44199918242739), (242, 682, 212.09790192275614), (242, 721, 213.35385334019827), (344, 451, 40.0)],
        #[(483, 499, 41.472239167076232), (484, 500, 41.477265903085318), (484, 539, 46.32853008886768), (449, 480, 40.0), (432, 490, 44.848330547463235), (466, 549, 56.673964172798605), (449, 559, 76.373269813910838), (415, 501, 51.107994801686317), (415, 540, 86.88837497224452), (414, 540, 87.613111230066892), (415, 540, 86.88837497224452), (449, 560, 77.188129676637288), (380, 560, 147.16168103775857), (380, 580, 194.1483506108942), (449, 580, 93.49383097058579), (449, 600, 106.13200100179584), (382, 600, 229.55888506541669), (415, 620, 188.27906382793319), (414, 620, 190.57095843711238), (415, 619, 188.36332340922215), (449, 600, 106.13200100179584), (414, 659, 149.60389519890106), (432, 669, 105.9319370973643), (466, 610, 80.580428821547969), (484, 620, 60.617170658595271), (450, 678, 74.560319285719075), (484, 659, 55.007689634295126), (483, 661, 55.153328620214907), (484, 661, 54.537765034936257), (518, 681, 40.0), (449, 681, 73.162677617829914), (449, 701, 59.07703921189767), (518, 701, 40.0), (518, 721, 40.0), (451, 721, 48.903898921302101), (484, 741, 41.175872882450165), (519, 681, 40.0), (518, 681, 40.0), (484, 661, 54.537765034936257), (553, 661, 40.0), (553, 641, 40.0), (484, 641, 58.666094421791897), (484, 621, 60.59765926319416), (551, 621, 40.0), (518, 601, 40.0), (518, 600, 40.0), (517, 601, 40.0), (483, 620, 61.490150752743716), (518, 561, 40.0), (500, 551, 44.313706597504371), (466, 610, 80.580428821547969), (448, 600, 108.02449279040164), (482, 542, 47.50585923864886), (448, 561, 79.094485256383024), (344, 451, 40.0)]
    ]

    pSim = PathSimulator(point_list)
    pSim.start_animation()
